# Queue Implementation in C

A simple circular queue (FIFO - First In, First Out) implementation in C that stores integers.

## About

This is a queue data structure that works like a line at a store - the first person in line is the first person served. It uses a circular buffer to efficiently reuse space.

## Contents

This implementation includes:
- **Queue Operations**: Add, Remove, Check full/empty status
- **Circular Buffer**: Efficient memory usage with wraparound
- **Error Handling**: Clear status codes for all operations
- **Comprehensive Testing**: Full test suite included

## Files

- `header.h` - Function declarations and data structures
- `spec.c` - Implementation of all queue functions  
- `main.c` - Test cases and examples

## Usage

To compile and run:
```bash
gcc -o queue_program main.c spec.c
./queue_program
```

Basic usage example:
```c
#include "header.h"

int main() {
    queueresult result;
    queue* my_queue = queue_new(5);  // Create queue for 5 items
    
    // Add numbers
    queue_add(my_queue, 100, &result);
    queue_add(my_queue, 200, &result);
    
    // Remove numbers (FIFO order)
    queue_remove(my_queue, &result);  // result.data = 100
    queue_remove(my_queue, &result);  // result.data = 200
    
    return 0;
}
```

## Functions

**queue_new(size)** - Creates a new queue that can hold specified number of items

**queue_add(queue, data, result)** - Adds a number to the back of the queue

**queue_remove(queue, result)** - Removes and returns the front number

**queue_empty(queue)** - Returns 1 if queue is empty, 0 otherwise

**queue_full(queue)** - Returns 1 if queue is full, 0 otherwise

## Status Codes

**QUEUE_OK (1)** - Operation successful

**QUEUE_FULL (2)** - Cannot add, queue is at maximum capacity

**QUEUE_EMPTY (4)** - Cannot remove, queue has no items

## How It Works

The queue uses head and tail pointers that wrap around in a circular fashion:

```
Add items:    [10][20][30][ ]
              ↑          ↑
            head       tail

Remove item:  [ ][20][30][ ]
                 ↑      ↑
               head   tail

Add item:     [40][20][30][ ]  ← tail wraps around
                 ↑         ↑
               head      tail
```

## Requirements

- C compiler (GCC recommended)
- Standard C library

## Testing

The program includes comprehensive tests that verify:
- Queue creation and initialization
- Adding items until full
- Removing items in FIFO order
- Proper handling of full and empty conditions
- Circular buffer wraparound functionality

Run the program and look for "All assertions passed" to confirm everything works correctly.

## Technical Details

- Maximum capacity: 32 items (configurable via MAX_QUEUE_LEN)
- Data type: 32-bit signed integers
- Memory: Dynamically allocated queue structure
- Algorithm: Circular buffer with head/tail pointers
